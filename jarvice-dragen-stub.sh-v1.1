#!/bin/bash
#set -e
#GCLOUD_PROJECT=
GCLOUD_IMAGE=atos-illumina-jxe-stub-rc
GCLOUD_IMAGE_PROJECT=atos-illumina-public
GCLOUD_MACHINE=n1-standard-1
GCLOUD_ZONE=us-central1-a
#GCLOUD_NETWORK=
#GCLOUD_SUBNET=
GCLOUD_INSTANCE=dragen
#JXE_USERNAME=
#JXE_APIKEY=
#JXE_APP=
#S3_ACCESS_KEY=
#S3_SECRET_KEY=
UNKNOWN_ARGS=""

function usage {
    cat <<EOF

Usage:
    $0 [options] -- [dragen_options]

Options:
    --project               GCP project
                            (required) 
    --image                 GCP dragen image
			    (Default: $GCLOUD_IMAGE)
    --image-project         GCP dragen image project
                            (Default: $GCLOUD_IMAGE_PROJECT)
    --machine               GCP machine
                            (Default: $GCLOUD_MACHINE)
    --zone                  GCP compute zone
                            (Default: $GCLOUD_ZONE)
    --network               GCP VPC network
                            (required)
    --subnet                GCP VPC subnet
                            (required)
    --instance-name         name of GCP compute instance
                            (Default: $GCLOUD_INSTANCE)
    --username              JARVICE XE username
                            (required)
    --apikey                JARVICE XE API key
                            (required)
    --dragen-app            DRAGEN application
                            (required)
    --s3-access-key         GCP interoperability HMAC access key

    --s3-secret-key         GCP interoperability HMAC secret key

Example:
    $0 --project nimbix --network default --subnet default

NOTE:
    This script requires GCP VPC firewall rule allowing ingress for tcp:22 (SSH access).

EOF
}

GCLOUD=$(type -p gcloud)
if [ -z "$GCLOUD" ]; then
    cat <<EOF
Could not find 'gcloud' in PATH. It may not be installed.
EOF
    exit 1
fi

#FLOCK=$(type -p flock)
#if [ -z "$FLOCK" ]; then
#    cat <<EOF
#Could not find 'flock' in PATH. It may not be installed.
#EOF
#    exit 1
#fi

LOCK_FILE="$HOME/.gcloud.lock"

while [ $# -gt 0 ]; do
    case $1 in
        --help)
            usage
	    exit 0
	    ;;
        --project)
            GCLOUD_PROJECT=$2
	    shift; shift
	    ;;
	--image)
            GCLOUD_IMAGE=$2
	    shift; shift
	    ;;
	--image-project)
	    GCLOUD_IMAGE_PROJECT=$2
	    shift; shift
	    ;;
        --machine)
	    GCLOUD_MACHINE=$2
	    shift; shift
	    ;;
	--zone)
            GCLOUD_ZONE=$2
	    shift; shift
	    ;;
	--network)
	    GCLOUD_NETWORK=$2
	    shift; shift
	    ;;
	--subnet)
	    GCLOUD_SUBNET=$2
	    shift; shift
	    ;;
	--instance-name)
            GCLOUD_INSTANCE=$2
	    shift; shift
	    ;;
	--username)
	    JXE_USERNAME=$2
	    shift; shift
	    ;;
	--apikey)
            JXE_APIKEY=$2
	    shift; shift
	    ;;
	--s3-access-key)
            S3_ACCESS_KEY=$2
	    shift; shift
	    ;;
	--s3-secret-key)
	    S3_SECRET_KEY=$2
	    shift; shift
	    ;;
	--dragen-app)
            JXE_APP=$2
	    shift; shift;
	    ;;
	--)
            shift;
	    break;
	    ;;
        *)
	    UNKNOWN_ARGS="$UNKNOWN_ARGS $1 $2"
            shift; shift
	    ;;
    esac
done

echo "Using GCLOUD_PROJECT=[$GCLOUD_PROJECT], GCLOUD_NETWORK=[$GCLOUD_NETWORK], \
 GCLOUD_SUBNET=[$GCLOUD_SUBNET], JXE_USERNAME=[$JXE_USERNAME], \
 JXE_APIKEY=[$JXE_APIKEY], JXE_APP=[$JXE_APP], GCLOUD_IMAGE=[$GCLOUD_IMAGE], \
 GCLOUD_IMAGE_PROJECT=[$GCLOUD_IMAGE_PROJECT], GCLOUD_MACHINE=[$GCLOUD_MACHINE],
 S3_ACCESS_KEY=[$S3_ACCESS_KEY], S3_SECRET_KEY=[$S3_SECRET_KEY]
"

[ -z "$GCLOUD_PROJECT" ] && echo 'GCP project required' && usage && exit 1

[ -z "$GCLOUD_NETWORK" ] && echo 'GCP network required' && usage && exit 1

[ -z "$GCLOUD_SUBNET" ] && echo 'GCP subnet required' && usage && exit 1

[ -z "$JXE_USERNAME" ] && echo 'JARVICE XE username required' && usage && exit 1

[ -z "$JXE_APIKEY" ] && echo 'JARVICE XE API key required' && usage && exit 1

[ -z "$JXE_APP" ] && echo 'DRAGEN application name required' && usage && exit 1

exit
tmp_file=$(mktemp "${GCLOUD_INSTANCE}-XXXX")
GCLOUD_INSTANCE="$(echo $tmp_file | awk '{print tolower($0)}')"
rm -rf $tmp_file

$FLOCK "$LOCK_FILE" $GCLOUD compute instances create "$GCLOUD_INSTANCE" \
    --project "$GCLOUD_PROJECT" \
    --image "$GCLOUD_IMAGE" \
    --image-project "$GCLOUD_IMAGE_PROJECT" \
    --machine-type "$GCLOUD_MACHINE" \
    --zone "$GCLOUD_ZONE" \
    --network "$GCLOUD_NETWORK" \
    --subnet "$GCLOUD_SUBNET"

function cleanup_gcp() {
    echo "Cleanup Google VM"
    $FLOCK "$LOCK_FILE" $GCLOUD compute instances delete -q \
        --project "$1" \
        --zone "$2" \
        "$3"
    exit
}
trap "cleanup_gcp ${GCLOUD_PROJECT} ${GCLOUD_ZONE} ${GCLOUD_INSTANCE}" EXIT
# wait for ssh to come up
IP=$($FLOCK "$LOCK_FILE" $GCLOUD --project "$GCLOUD_PROJECT" compute instances list \
    --filter "name=${GCLOUD_INSTANCE}" \
    --format="table(
        networkInterfaces[].accessConfigs[0].natIP.notnull().list():label=
	)" 2>/dev/null)
echo "Waiting for ssh to come up. Ctrl+C to abort"
while ! 2> /dev/null > /dev/tcp/$IP/22; do
    sleep 15
done

S3_ARGS=""
[ -n "$S3_ACCESS_KEY" ] && S3_ARGS="--s3-access-key $S3_ACCESS_KEY "
[ -n "$S3_SECRET_KEY" ] && S3_ARGS="$S3_ARGS --s3-secret-key $S3_SECRET_KEY "

UNKNOWN_ARGS=($UNKNOWN_ARGS)
$GCLOUD compute ssh \
    --project "$GCLOUD_PROJECT" \
    --zone "$GCLOUD_ZONE" \
    ubuntu@${GCLOUD_INSTANCE} -- \
    /opt/JARVICE/bin/jarvice-dragen-client \
    --username "$JXE_USERNAME" --apikey "$JXE_APIKEY" --dragen-app "$JXE_APP" \
    ${UNKNOWN_ARGS[@]} -- $S3_ARGS $*

