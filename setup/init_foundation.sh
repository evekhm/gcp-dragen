#!/bin/bash
set -e # Exit if error is detected during pipeline execution => terraform failing

WDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${WDIR}/init_env_vars.sh" > /dev/null 2>&1
PWD=$(pwd)

auto_approve=''
while getopts ad flag
do
    case "${flag}" in
        a) auto_approve='-auto-approve';;
        d) ignore_this='true';; #being ignored in this script but used in others passed via @$
        *) usage;;
    esac
done

usage()
{
    echo "Usage: $0
        [ -a Auto-Approve Terraform  ]
"
    echo "-a: Optional set to auto-approve terraform changes. By default will ask explicitly"
    exit 2
}


cd "${WDIR}"/../terraform/stages/foundation || exit
PWD2=$(pwd)

# Init Terraform
terraform init -reconfigure -backend-config=bucket="${TF_BUCKET_NAME}"

# Enabling GCP services first.
terraform apply -target=module.project_services -target=module.service_accounts "$auto_approve"


echo "Wait 10 seconds for services updates..."
sleep 10
# Run the rest of Terraform
terraform apply "$auto_approve"

# Cleanup Secret files generated by Terraform
hmac_secret_file_name=$(terraform output -json hmac_secret_file_name | tr -d '"') #remove " at the beg and at the end
FILE_PATH="${PWD2}/${hmac_secret_file_name}"
if [ -f "${FILE_PATH}" ]; then
  echo "Cleaning up ${FILE_PATH}"
  rm "${FILE_PATH}"
fi
hmac_access_id_file_name=$(terraform output -json hmac_access_file_name  | tr -d '"')
FILE_PATH="${PWD2}/${hmac_access_id_file_name}"
if [ -f "$FILE_PATH" ]; then
  echo "Cleaning up $FILE_PATH"
  rm "${FILE_PATH}"
fi

cd "$PWD" || exit