#!/bin/bash
#set -e
UNKNOWN_ARGS=""

date_str=$(date +%s )
function usage {
    cat <<EOF

Usage:
    $0 [options] -- [dragen_options]

Options:
    --project               GCP project
                            (required)
    --image                 GCP dragen image
			    (Default: $GCLOUD_IMAGE)
    --image-project         GCP dragen image project
                            (Default: $GCLOUD_IMAGE_PROJECT)
    --machine               GCP machine
                            (Default: $GCLOUD_MACHINE)
    --zone                  GCP compute zone
                            (Default: $GCLOUD_ZONE)
    --network               GCP VPC network
                            (required)
    --subnet                GCP VPC subnet
                            (required)
    --instance-name         name of GCP compute instance
                            (Default: $GCLOUD_INSTANCE)
    --username              JARVICE XE username
                            (required)
    --apikey                JARVICE XE API key
                            (required)
    --dragen-app            DRAGEN application
                            (required)
    --s3-access-key         GCP interoperability HMAC access key

    --s3-secret-key         GCP interoperability HMAC secret key

Example:
    $0 --project nimbix --network default --subnet default

NOTE:
    This script requires GCP VPC firewall rule allowing ingress for tcp:22 (SSH access).

EOF
}

GCLOUD=$(type -p gcloud)
if [ -z "$GCLOUD" ]; then
    cat <<EOF
Could not find 'gcloud' in PATH. It may not be installed.
EOF
    exit 1
fi

while [ $# -gt 0 ]; do
    case $1 in
        --help)
            usage
	    exit 0
	    ;;
        *)
	    UNKNOWN_ARGS="$UNKNOWN_ARGS $1 $2"
            shift; shift
	    ;;
    esac
done

echo "Using GCLOUD_PROJECT=[$GCLOUD_PROJECT], GCLOUD_NETWORK=[$GCLOUD_NETWORK], \
 GCLOUD_SUBNET=[$GCLOUD_SUBNET], JXE_USERNAME=[$JXE_USERNAME], \
 JXE_APIKEY=[$JXE_APIKEY], JXE_APP=[$JXE_APP], GCLOUD_IMAGE=[$GCLOUD_IMAGE], \
 GCLOUD_IMAGE_PROJECT=[$GCLOUD_IMAGE_PROJECT], GCLOUD_MACHINE=[$GCLOUD_MACHINE],
 S3_ACCESS_KEY=[$S3_ACCESS_KEY], S3_SECRET_KEY=[$S3_SECRET_KEY]
"

[ -z "$GCLOUD_PROJECT" ] && echo 'GCP project required' && usage && exit 1

[ -z "$GCLOUD_NETWORK" ] && echo 'GCP network required' && usage && exit 1

[ -z "$GCLOUD_SUBNET" ] && echo 'GCP subnet required' && usage && exit 1

[ -z "$JXE_USERNAME" ] && echo 'JARVICE XE username required' && usage && exit 1

[ -z "$JXE_APIKEY" ] && echo 'JARVICE XE API key required' && usage && exit 1

[ -z "$JXE_APP" ] && echo 'DRAGEN application name required' && usage && exit 1


S3_ARGS=""
[ -n "$S3_ACCESS_KEY" ] && S3_ARGS="--s3-access-key $S3_ACCESS_KEY "
[ -n "$S3_SECRET_KEY" ] && S3_ARGS="$S3_ARGS --s3-secret-key $S3_SECRET_KEY "

UNKNOWN_ARGS=($UNKNOWN_ARGS)

dragen_cmd="jarvice-dragen-stub.sh \
    --project "$GCLOUD_PROJECT" \
    --network $GCLOUD_NETWORK \
    --subnet $GCLOUD_SUBNET \
    --username $JXE_USERNAME \
    --apikey $JXE_APIKEY \
    --dragen-app $JXE_APP \
    $S3_ARGS \
    ${UNKNOWN_ARGS[@]}"


echo "$dragen_cmd"

version="dev"

JOB_NAME_UID=${JOB_NAME}-${date_str}
echo "Submitting $JOB_NAME_UID"
gcloud beta batch jobs submit "$JOB_NAME_UID" --network="projects/$PROJECT_ID/global/networks/$GCLOUD_NETWORK" --subnetwork="projects/$PROJECT_ID/regions/${GCLOUD_REGION}/subnetworks/$GCLOUD_SUBNET" --config - <<EOD
{
  "name": "$JOB_NAME_UID",
  "taskGroups": [
    {
      "taskCount": "1",
      "parallelism": "1",
      "taskSpec": {
        "computeResource": {
          "cpuMilli": "1000",
          "memoryMib": "512"
        },
        "runnables": [
          {
            "container": {
              "imageUri": "us-docker.pkg.dev/jarvice/images/illumina-dragen:$version",
              "entrypoint": "/bin/bash",
              "commands": [
                "-c",
                "$(echo $dragen_cmd)"
              ],
              "volumes": []
            }
          }
        ],
        "volumes": []
      }
    }
  ],
  "allocationPolicy": {
    "serviceAccount": {
        "email": "${SA_JOB_EMAIL}"
    },
    "instances": [
      {
        "policy": {
          "provisioningModel": "STANDARD",
          "machineType": "${GCLOUD_MACHINE}"
        }
      }
    ]
  },
  "logsPolicy": {
    "destination": "CLOUD_LOGGING"
  }
}
EOD

echo "Commands to manage the jobs:"
echo "Details about $JOB_NAME_UID job:"
echo "  gcloud beta batch jobs describe $JOB_NAME_UID"
echo "Delete $JOB_NAME_UID job:"
echo "  gcloud beta batch jobs delete $JOB_NAME_UID"
echo "List all jobs:"
echo "  gcloud beta batch jobs list"

